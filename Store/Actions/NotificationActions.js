import fb from '../../API/FirebaseSetup';
import * as Notifications from 'expo-notifications';
import * as Permissions from 'expo-permissions';
import Constants from 'expo-constants';

// CREATE: Notification Object
// Adds a new notification to the notifID collection in the notifications bucket
// This notification was generated by the userID
// TODO: Take in the user's expoToken for all occurences of push notifications
export const createNotification = (data) => {
    console.log('Create Notif Action');
    const { userID, drinkID, type, notifID, comment } = data;
    return async (dispatch, getState, { getFirebase }) => {
        const firebase = await getFirebase();
        const firestore = await firebase.firestore();

        const date = new Date();

        // Current Comment ID
        const ref = await firestore
            .collection('notifications')
            .doc(notifID)
            .collection('allNotifications')
            .doc();
        const id = ref.id;
        console.log('Current Notif ID: ' + id);

        try {
            // Add notif to the notifs collection
            await firestore
                .collection('notifications')
                .doc(notifID)
                .collection('allNotifications')
                .doc(id)
                .set({
                    userID: userID,
                    type: type,
                    dateCreated: date.toISOString(),
                    drinkID: drinkID,
                    id: id,
                    comment: comment
                })

            await sendPushNotification(null, null);

            dispatch({ type: 'CREATE_NOTIF', id });
        } catch (err) {
            dispatch({ type: 'CREATE_NOTIF_ERROR', err });
        }
    }
};

// DELETE: Notification Object
// Deletes a new notification
export const deleteNotification = (data) => {
    console.log('Delete Notif Action');
    const { notifID, id } = data;
    return async (dispatch, getState, { getFirebase }) => {
        const firebase = await getFirebase();
        const firestore = await firebase.firestore();

        try {
            // Delete notif from the notifs collection
            await firestore
                .collection('notifications')
                .doc(notifID)
                .collection('allNotifications')
                .doc(id)
                .delete();

            dispatch({ type: 'DELETE_NOTIF', id })
        } catch (err) {
            dispatch({ type: 'DELETE_NOTIF_ERROR', err });
        }
    }
};

// Send notification to specific user
const sendPushNotification = async (token, title, body) => {
    const expoPushToken = 'ExponentPushToken[iXU2Z0IpaJ3flCQEEQUZAu]'
    const message = {
        to: expoPushToken,
        sound: 'default',
        title: 'Original Title',
        body: 'And here is the body!',
        data: { someData: 'goes here' },
    };

    await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Accept-encoding': 'gzip, deflate',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
    });
}

// Send notification to all users
const sendNotificationToAllUsers = async () => {
    const users = await fb.firestore().collection('users').get();
    users.docs.map(user => sendPushNotification(user.data().expoToken));
}