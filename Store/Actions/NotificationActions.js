import fb from '../../API/FirebaseSetup';
import { renderNotificationText } from '../../Functions/miscFunctions';
import * as Notifications from 'expo-notifications';

// CREATE: Notification Object
// Adds a new notification to the notifID collection in the notifications bucket
// This notification was generated by the userID
export const createNotification = (data) => {
    console.log('Create Notif Action');
    const { userID, drinkID, type, notifID, comment, token } = data;
    return async (dispatch, getState, { getFirebase }) => {
        const firebase = await getFirebase();
        const firestore = await firebase.firestore();

        const date = new Date();
        date.setTime(date.getTime() - new Date().getTimezoneOffset() * 60 * 1000);

        // Current Comment ID
        const ref = await firestore
            .collection('notifications')
            .doc(notifID)
            .collection('allNotifications')
            .doc();
        const id = ref.id;
        console.log('Current Notif ID: ' + id);

        try {
            // Add notif to the notifs collection
            await firestore
                .collection('notifications')
                .doc(notifID)
                .collection('allNotifications')
                .doc(id)
                .set({
                    userID: userID,
                    type: type,
                    dateCreated: date.toISOString(),
                    drinkID: drinkID,
                    id: id,
                    comment: comment
                })

            // Find the user that notif is from
            let fromUser;
            await firestore
                .collection('profiles')
                .doc(userID)
                .get()
                .then((doc) => {
                    if (doc.exists) {
                        fromUser = doc.data().userName
                    }
                })

            // Find the drink that the notif is about
            let drink;
            console.log(drinkID);
            if (drinkID) {
                await firestore
                    .collection('drinks')
                    .doc(drinkID)
                    .get()
                    .then((doc) => {
                        if (doc.exists) {
                            drink = doc.data();
                        }
                    })
            }


            dispatch({ type: 'CREATE_NOTIF', id });

            const allowed = await allowsNotificationsAsync();
            if (allowed && token) {
                await sendPushNotification(token, type, fromUser, drink, comment);
            }
        } catch (err) {
            dispatch({ type: 'CREATE_NOTIF_ERROR', err });
        }
    }
};

// DELETE: Notification Object
// Deletes a new notification
export const deleteNotification = (data) => {
    console.log('Delete Notif Action');
    const { notifID, id } = data;
    return async (dispatch, getState, { getFirebase }) => {
        const firebase = await getFirebase();
        const firestore = await firebase.firestore();

        try {
            // Delete notif from the notifs collection
            await firestore
                .collection('notifications')
                .doc(notifID)
                .collection('allNotifications')
                .doc(id)
                .delete();

            dispatch({ type: 'DELETE_NOTIF', id })
        } catch (err) {
            dispatch({ type: 'DELETE_NOTIF_ERROR', err });
        }
    }
};

// Send notification to specific user
const sendPushNotification = async (token, type, fromUser, drink, comment) => {

    let body = '' + fromUser + ' ';
    let item = { type: type, comment: comment };
    body += renderNotificationText(item, drink);

    const message = {
        to: token,
        sound: 'default',
        title: 'Bardega | Cocktail Club',
        body: body,
        // data: { someData: 'goes here' },
    };

    await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Accept-encoding': 'gzip, deflate',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
    });
}

// Helper function to send notification to all users
const sendNotificationToAllUsers = async () => {
    const users = await fb.firestore().collection('users').get();
    users.docs.map(user => sendPushNotification(user.data().expoToken));
}

// Helper function to check if user is currently allowing notifications
const allowsNotificationsAsync = async () => {
    const settings = await Notifications.getPermissionsAsync();
    return (
        settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL
    );
}